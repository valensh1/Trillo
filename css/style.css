/*
COLORS

Primary: #eb2f64
Primary light: #FF3366
Primary dark: #BA265D

Grey light 1: #faf9f9
Grey light 2: #f4f2f2
Grey light 3: #f0eeee
Grey light 4: #ccc

Grey dark 1: #333
Grey dark 2: #777
Grey dark 3: #999

*/
/* GLOBAL CSS DEFAULT SETTINGS WE WOULD LIKE TO START WITH */
:root {
  /* Higher specificity than html. Put our custom properties at highest place in document so it can be used throughout anywhere */
  --color-primary: #eb2f64;
  /* -- double dashes distinghish our custom properties from regular CSS properties */
  --color-primary-light: #ff3366;
  /* -- double dashes distinghish our custom properties from regular CSS properties */
  --color-primary-dark: #ba265d;
  /* -- double dashes distinghish our custom properties from regular CSS properties */
  --color-grey-light-1: #faf9f9;
  --color-grey-light-2: #f4f2f2;
  --color-grey-light-3: #f0eeee;
  --color-grey-light-4: #ccc;
  --color-grey-dark-1: #333;
  --color-grey-dark-2: #777;
  --color-grey-dark-3: #999;
  --shadow-dark: 0 2rem 6rem rgba(0,0,0,.3);
  /* first value is x (horizontal), 2nd value is y which is vertical, 3rd value is the blur (higher the number the greater the blur), and the last value is the color */
  --shadow-light: 0 2rem 5rem rgba(0, 0, 0, .06);
  /* first value is x (horizontal), 2nd value is y which is vertical, 3rd value is the blur (higher the number the greater the blur), and the last value is the color */
  --line: 1px solid var(--color-grey-light-2); }

/* Sass Variables for Media Query Breakpoints */
/* This is a Sass variable as you CANNOT use CSS variables with media queries. 1200px / 16px = 75em; bp stands for break-point and we are targeting a break-point of 1200px or 75em here */
/* This is a Sass variable as you CANNOT use CSS variables with media queries. 1100px / 16px = 68.75em; bp stands for break-point and we are targeting a break-point of 1100px or 68.75em here */
/* This is a Sass variable as you CANNOT use CSS variables with media queries. 900px / 16px = 56.25em; bp stands for break-point and we are targeting a break-point of 900px or 56.25em here */
* {
  margin: 0;
  padding: 0; }

*,
*::before,
*::after {
  box-sizing: inherit; }

html {
  box-sizing: border-box;
  font-size: 62.5%;
  /* 1rem = 10px ----> 10px/16px = 62.5%; 16px is standard browser font-size and we would like to distribute our elements in units of 10px. */ }
  @media only screen and (max-width: 68.75em) {
    html {
      font-size: 50%;
      /* At 1100px or 68.75em we want to decrease the standard computer font-size from 16px down to 8px which is 8px/16px = .50 or 50% */ } }

body {
  font-family: 'Open Sans', sans-serif;
  font-weight: 400;
  line-height: 1.6;
  color: var(--color-grey-dark-2);
  background-image: linear-gradient(to right bottom, var(--color-primary-light), var(--color-primary-dark));
  /* This set pinkish background on our page */
  background-size: cover;
  background-repeat: no-repeat;
  min-height: 100vh; }

.container {
  max-width: 120rem;
  /* if max-width is less than 120rem then it will occupy 100% of viewport width */
  margin: 8rem auto;
  /* centers container inside parent element which is the body */
  background-color: var(--color-grey-light-2);
  box-shadow: var(--shadow-dark);
  min-height: 50rem; }
  @media only screen and (max-width: 75em) {
    .container {
      margin: 0;
      /* We no longer need extra pinkish background-color at top when there is no pinkish background on sides as the screen decreases. To get rid of the background-color we just set margin to 0 as that is what allowed us to see our pinkish background in the first place on th bigger screens. */
      max-width: 100%;
      /* As we get smaller screen size the pinkish background is coming back so we set max-width to 100% to fix this */
      width: 100%;
      /* As we get smaller screen size the pinkish background is coming back so we set max-width of our container class to 100% also to ensure we get our container filling the entire screen and covering the pinkish background of the body. */ } }

.header {
  font-size: 1.4rem;
  height: 7rem;
  background-color: #fff;
  border-bottom: 1px solid var(--line);
  display: flex;
  justify-content: space-between;
  /* Placed the header with space-between because we don't want any space between the logo and the user name on the sides. */
  align-items: center;
  /* Centers the header content vertically */ }

.content {
  /* Flex Container */
  display: flex; }
  @media only screen and (max-width: 56.25em) {
    .content {
      flex-direction: column;
      /* At 900px or 56.25em this is making everything a flex direction of column so we can get our sidebar navigation to the top. This moves it to the top on top of our hotel pictures but we need to further alter it so the navigation items aren't just in a column format but actually go horizontally across page. This is the first step in getting them to sit on top of page though. Also check the .side-nav in components to then get the sidebar navigation to then sit horizontally next to each other at top once the screen size gets to 900px or 56.25em or smaller. */ } }

.sidebar {
  /* Flex Items */
  background-color: var(--color-grey-dark-1);
  flex: 0 0 18%;
  /* 1st value = flex grow (default is 0); 2nd value = shrink (default is 0); Last Value = width of flex item which is 18%; This flex width property will override any width property you try to give it. Flex grow and shrink properties will not grow or shrink due to our values being 0. */
  display: flex;
  flex-direction: column;
  /* Have sidebar menu items flow vertically in column format */
  justify-content: space-between;
  /* justify-content usually run horizontally in row direction but because we changed the main axis to column then justify content works in vertical/column fashion and align items would now work in the cross-axis horizontal/row fashion. This pushes the <ul> tag class of side-nav and <div> tag class of legal to separate ends of the vertical space. Space-between fills all the empty space and spaces the two flex items apart. These are the 2 flex items and not anything else because these are the 2 direct children of the <nav> tag with class of sidebar. The 4 list items with the icons are all grouped together at the top because this is considered one flex item (all under the <ul> tag withclass of side-nav) and the <div> with classof legal is considered the 2nd flex item and this was pushed to bottom of container. These are both direct children. */ }

.hotel-view {
  /* Flex Items */
  background-color: #fff;
  flex: 1;
  /* This will grow the Hotel View class as much as it can grow to take up the remaining additional space. With sidebar class above being 18% already setting this property to 1 will grow it to 82% of the width of the container. */ }

.detail {
  font-size: 1.4rem;
  display: flex;
  padding: 4.5rem;
  background-color: var(--color-grey-light-1);
  border-bottom: var(--line); }
  @media only screen and (max-width: 56.25em) {
    .detail {
      padding: 3rem; } }

.description {
  box-shadow: var(--shadow-light);
  padding: 3rem;
  flex: 0 0 60%;
  /* First 0 represents flex grow, 2nd 0 represents flex shrink and the last value of 60% represents the width */
  margin-right: 4.5rem; }
  @media only screen and (max-width: 56.25em) {
    .description {
      padding: 2rem;
      margin-right: 3rem; } }

.user-reviews {
  flex: 1;
  /* We want this to take up the remaining additional horizontal space in container so we set flex to 1; Flex property with only one value is the same as flex-grow: 1 */
  display: flex;
  /* Everything was coming out Ok but need to center Show All -> button at bottom so put in display:flex property here so we can properly center that button. If didn't have that button then we wouldn't need this as everything was already perfectly aligned */
  flex-direction: column;
  align-items: center;
  /* Before putting this here the Show All -> button had a large underline that stretched the entire width of its parent container because when using flex the detault property for elements is stretch so the line was stretching across. We just include align-items because we are dealing with the cross axis which because flex-direction is column now the align-items is working horizontally across the cross-axis and when we put align-items to center it changes that stretch property to center and now the underline is ONLY showing the span of the text Show All -> instead of spanning the entire width of its parents container which run way further than the button itself */ }

/*-------------------------------LOGO--------------------------------------------*/
.logo {
  height: 3.25rem;
  margin-left: 2rem; }

/*-------------------------------SEARCH BAR--------------------------------------------*/
.search {
  flex: 0 0 40%;
  /* Since this is a flex item (child of a flex property - which is the header) we can use flex property here; 1st 0 = grow; 2nd 0 = shrink; 3rd element = 40% and that means we want to stretch the search bar 40% of its available container */
  display: flex;
  /* We can also make this a flex element even though this is a flex item using the flex property above; We use the flex property here to move and position the input and magnifying glass within our search form container. */
  align-items: center;
  /* Centers elements in the middle of the container vertically */
  justify-content: center;
  /* Centers elements in the middle of the container horizontally */ }
  .search__input {
    /* This is the search input box */
    font-family: inherit;
    /* font of input does not pick up global font-family settings automatically and must put inherit for it to receive global font settings */
    font-size: inherit;
    /* font of input does not pick up global font-family settings automatically and must put inherit for it to receive global font settings */
    color: inherit;
    background-color: var(--color-grey-light-2);
    border: none;
    padding: .7rem 2rem;
    border-radius: 10rem;
    /* Gives search bar input a rounded border */
    width: 90%;
    transition: all .2s;
    /* Animation for the input box stretching from 90% to 100% when user clicks inside input box to search for something */
    margin-right: -3.25rem;
    /* Moves the magnifying glass button on top of the search input field; If it doesn't have this property it sits to the complete right side of the input field */ }
    .search__input:focus {
      /* This selector is activated upon a user clicking inside the search field to enter a search term */
      outline: none;
      /* Gets rid of default browser outline (usally blue) when you put something in focus */
      width: 100%;
      background-color: var(--color-grey-light-3); }
    .search__input::placeholder {
      /* Styling for default placeholder text found in search input bar */
      font-weight: 100;
      color: var(--color-grey-light-4); }
  .search__input:focus + .search__button {
    /* This selector is selecting the adjacent sibling of &__input which if you look at the HTML file it is search__button or &__button in our case here for CSS purposes. */
    background-color: var(--color-grey-light-3); }
  .search__button {
    border: none;
    background-color: var(--color-grey-light-2); }
    .search__button:focus {
      outline: none;
      /* Gets rid of default browser outline (usually blue) when element is in focus */ }
    .search__button:active {
      transform: translateY(0.2rem);
      /* Moves magnifying glass search button down a bit upon clicking to make it look like it is being pushed down */ }
  .search__icon {
    height: 2rem;
    width: 2rem;
    fill: var(--color-grey-dark-3);
    /* The fill property changes the color of the svg element; So here we are changing the color of the magnifying glass from its default black to dark grey */ }

/*-------------------------------USER NAVIGATION AT TOP OF WEBSITE (INCLUDES BOOKMARK ICON/ CHAT ICON / USER PHOTO--------------------------------------------*/
.user-nav {
  align-self: stretch;
  /* The picture is higher than the other icons (content has a higher height) so the other icons are centered vertically based off the flex property assigned in the layout file under .heading we have align-items:center and don't take up as much height as the picture of the user. We want the boxes all to be equal sized as the picture of the user icon so we use align-self: stretch property here to override the align-items: center property assigned for the header section because we want these boxes to stretch to the same height as the user picture. */
  display: flex;
  /* This is to position the navigation like bookmark, chat icons and user photo so that it is horizontally centered. */
  align-items: center;
  /* This is to position the navigation like bookmark, chat icons and user photo vertically centered. */
  justify-content: space-between; }
  .user-nav > * {
    /* Selects user-nav and all its direct children whichis the user-nav__icon-box (both elements because there are 2 of them - the bookmark and the chat icon) and the user-nav__user element which contains the user photo and the span text. */
    padding: 0 2rem;
    /* Gives the icons spacing; Replacing padding with margin here seemed to have the same effect */
    cursor: pointer;
    /* Gives hand pointer when hovering over and selecting these icons */
    height: 100%;
    /* Needed to give all children of user-nav a height of 100%. They were not as high as the user image so we needed to ensure that all the boxes are 100% in height */
    display: flex;
    /* This fixes issue when hovering over icons they go to top of container but this makes sure they are vetically centered even upon hover. */
    align-items: center;
    /* This fixes issue when hovering over icons they go to top of container but this makes sure they are vetically centered even upon hover. */ }
  .user-nav > *:hover {
    /* Selects user-nav and all its direct children whichis the user-nav__icon-box (both elements because there are 2 of them - the bookmark and the chat icon) and the user-nav__user element which contains the user photo and the span text. */
    background-color: var(--color-grey-light-2); }
  .user-nav__icon-box {
    position: relative;
    /* Position needs to be relative here in order to absolute position the little notication number */ }
  .user-nav__icon {
    height: 2.25rem;
    width: 2.25rem;
    fill: var(--color-grey-dark-2);
    /* This changes the color of the icon/svg element */ }
  .user-nav__notification {
    font-size: .8rem;
    height: 1.75rem;
    width: 1.75rem;
    border-radius: 50%;
    /* Makes the container element circular */
    background-color: var(--color-primary);
    /* color the notification with a pinkish color */
    color: #fff;
    /* Make the color of the textf or the notification white */
    position: absolute;
    /* Need the parent above &__icon-box to be positioned relative in order to position this little notification circle absolute */
    top: 1.5rem;
    /* Moving the pink circle to position it */
    right: 1.1rem;
    /* Moving the pink circle to position it */
    display: flex;
    /* You can use flex on text to center; This is used to center the notification number */
    justify-content: center;
    /* Center notification number horizontally */
    align-items: center;
    /* Center notification number vertically */ }
  .user-nav__user-photo {
    height: 3.75rem;
    border-radius: 50%;
    /* Makes picture circular */
    margin-right: 1rem; }

/*-------------------------------SIDE NAVIGATION--------------------------------------------*/
.side-nav {
  font-size: 1.4rem;
  list-style: none;
  /* Gets rid of bullet points in list */
  margin-top: 3.5rem; }
  @media only screen and (max-width: 56.25em) {
    .side-nav {
      /* When screen hits 900px or 56.25em or below then set display to flex. This will cause all sidebar navigation items to be placed horizontally next to each other instead of stacked on top of each other vertically. */
      display: flex;
      margin: 0; } }
  .side-nav__item {
    position: relative; }
    .side-nav__item:not(:last-child) {
      margin-bottom: .5rem; }
      @media only screen and (max-width: 56.25em) {
        .side-nav__item:not(:last-child) {
          margin: 0;
          /* Eliminates any pinkish background at this smaller screen size of 900px or 56.25em or smaller */ } }
    @media only screen and (max-width: 56.25em) {
      .side-nav__item {
        flex: 1;
        /* When screen hits 900px or 56.25em or below then give each item a flex of 1 which gives them the ability to all grow in tandem together; Flex 1 calcs the available space across screen and gives all of them EXCEPT the last child the available space it needs until the last child hits the side of the container. */ } }
  .side-nav__item::before {
    /* This creates the pinkish small narrow line upon initial hover before it then gets thicker and goes across element from left to right and colors the menu item in complete pink */
    content: "";
    position: absolute;
    /* This is positioned absolute and relies on relative positioning of the parent &__item above */
    top: 0;
    /* Position it at top of its container */
    left: 0;
    /* Position it at left of its container */
    height: 100%;
    /* Want the narrow pink line to cover 100% of the height of its container */
    width: .3rem;
    /* Make this narrow pink line very narrow at only .3rem */
    background-color: var(--color-primary);
    transform: scaleY(0);
    /* scaleY is making the pink line bigger vertically; This is set to 0 so we don't see it at all and then when we hover over the menu item the scaleY changes to 1 such as below in  &__item:hover::before */
    transition: transform 0.2s, width 0.4s cubic-bezier(1, 0, 0, 1) 0.2s, background-color 0.1s;
    /* Sets the transition/animation of the transform property to .2s in duration then sets the transition/animation of the width property at a duration of .4s with a delay of .2s before the animation begins. Notice how the .2s duration is equal to the .2s it takes for the transform property to run. That is set at .2s on purpose so as soon as the transform animation of making the pink line go vertical is done then the pink line grows horizontally and covers the entire menu item; cubic-bezier sets the animation motion where it starts off slow and then accelerates. You can go to a site cubic-bezier.com and play with the animations and the speed of animation. Finally this animates/transitions the  &__item:active::before selector below for the background property with .1s duration.  */ }
  .side-nav__item:hover::before, .side-nav__item--active::before {
    /* This highlights the pink bar over the entire first HOTEL menu item */
    transform: scaleY(1);
    /* This makes the pink line scale vertically when we hover over it and you will see the pink line before the icon and the menu item description */
    width: 100%;
    /* Width at 100% so when we hover over the menu item it will start at a width of .3rem set above in the &__item::before and will grow vertically by the scaleY set to 1 and grow horizontally by us increasing the width to 100%. */ }
  .side-nav__item:active::before {
    background-color: var(--color-primary-light);
    /* Upon clicking on any of the menu items the color turns a bit lighter. The animation for this is above in the &__item::before above where we specify a .1s duration for the background-color change to a lighter color upon clicking the menu item. */ }
  .side-nav__link:link, .side-nav__link:visited {
    color: var(--color-grey-light-1);
    text-decoration: none;
    /* Get rid of underline in link or <a> tag */
    text-transform: uppercase;
    padding: 1.5rem 3rem;
    /* 1.5rem vertical top and bottom padding and 3rem horizontal left/right padding */
    position: relative;
    /* There has to be a positioned property in order for z-index directly below to work */
    z-index: 10;
    /* Without this the pink line was doing its animation but covering the icons with the menu item descriptions. Set a z-index so that the icons and the menu item descriptions sit on top of the pink bar that animates over the menu item. In order for z-index to work you have to have a positioned item such as the position: relative directly above in the code. */
    display: flex;
    /* Needed to center vertically the <svg> icons with <span> tag which is the description of the menu item/icon. The side-nav__link which is what this selector is under is the parent and the 2 direct children that needed to be aligned are the <svg> tag (icon) and the <span> tag (menu text) therefore the flex property goes here. */
    align-items: center;
    /* Needed to center vertically the <svg> icons with <span> tag which is the description of the menu item/icon */ }
    @media only screen and (max-width: 56.25em) {
      .side-nav__link:link, .side-nav__link:visited {
        justify-content: center;
        /* At 900px or 56.25em or below screen size we want to center the links of the navigation that runs horizontally at top inside their individual containers */
        padding: 2rem; } }
  .side-nav__icon {
    width: 1.75rem;
    height: 1.75rem;
    margin-right: 2rem;
    fill: currentColor;
    /* Fill property is the property to use to color <svg> items. CurrentColor property is the color of the current parent which is the --color-grey-light-1 from the &__link:link, &__link:visited above; &__icon is a child of this parent and so currentColor property just essentially says to inherit color property from parent. */ }

/*-------------------------------LEGAL TEXT--------------------------------------------*/
.legal {
  font-size: 1.2rem;
  color: var(--color-grey-light-4);
  text-align: center;
  padding: 2.5rem; }
  @media only screen and (max-width: 56.25em) {
    .legal {
      display: none;
      /* At 900px or 56.25em or smaller screen size DO NOT SHOW the legal text anymore */ } }

/*-------------------------------HOTEL PHOTOS--------------------------------------------*/
.gallery {
  display: flex; }
  .gallery__photo {
    width: 100%;
    /* Width is 100% of the containing block which is the <figure> element */
    display: block;
    /* All images should be block or inline-block elements to get rid of white space below it; By default images are inline elements */ }

/*-------------------------------HOTEL OVERVIEW WITH RATINGS AND LOCATION AND STAR RATING--------------------------------------------*/
.overview {
  display: flex;
  align-items: center;
  border-bottom: 1px solid var(--line); }
  .overview__heading {
    /* HOTEL LAS PALMAS HEADING */
    font-size: 2.25rem;
    font-weight: 300;
    text-transform: uppercase;
    letter-spacing: 1px;
    padding: 1.5rem 3rem; }
  .overview__stars {
    margin-right: auto;
    /* Auto here sets the stars container to the width of its content and pushes the other content to the right of it (location and ratings) all the way to the end of the other side of the parents flex container; We commented out the above because although we get the desired look but now the stars take up the remaining space but what if we want some hover effect, etc we don't want the stars to have that big of a box. */
    display: flex;
    /* Adding flex here gets rid of extra space at bottom of stars and height of container is the star icon itself */ }
  .overview__icon-star, .overview__icon-location {
    /* This is the location icon */
    width: 1.75rem;
    height: 1.75rem;
    fill: var(--color-primary);
    /* Give our icons the pinkish primary color of our website */ }
  .overview__location {
    font-size: 1.2rem;
    display: flex;
    align-items: center; }
  .overview__icon-location {
    margin-right: .5rem; }
  .overview__rating {
    background-color: var(--color-primary);
    color: #fff;
    margin-left: 3rem;
    align-self: stretch;
    /* Without this the rating section with the background did not stretch the height of the parents container. There was some empty white space at the top and bottom. To fix this you use the flex property align-self which overrides the align-items center that the parent class overview placed on this flex item. */
    padding: 0 2.25rem;
    display: flex;
    /*  Set this as flex so we can move and center the elements within this container. We are a flex item and also a flex parent. We are a flex item by the align-self above because we are a flex item from the overview class but we are now becoming a flex parent as well because we need to move the elments within this containing block */
    align-items: center;
    /* Vertically center items */
    justify-content: center;
    /* Horizontally center items */
    flex-direction: column;
    /* Set the direction to column/vertical because default is horizontal */ }
  .overview__rating-average {
    font-size: 2.25rem;
    font-weight: 300;
    margin-bottom: -.3rem; }
  .overview__rating-count {
    font-size: .8rem;
    text-transform: uppercase; }

/*-------------------------------LOCATION NAME WHICH IS A LINK/BUTTON--------------------------------------------*/
.btn-inline {
  /* This is the location button that looks like a link on page that says Albufeira, Portugal */
  border: none;
  /* Git rid of the border that buttons get by default */
  color: var(--color-primary);
  font-size: inherit;
  border-bottom: 1px solid currentColor;
  /* currentColor property is the color from above which indicates the --color-primary so you don't have to change it in two different places if you do decide to change it */
  padding: inline-block;
  background-color: transparent;
  cursor: pointer;
  transition: all .2s; }
  .btn-inline span {
    margin-left: .3rem;
    transition: margin-left .2s;
    /* animation of the arrow moving to right with .2s duration */ }
  .btn-inline:hover {
    color: var(--color-grey-dark-1); }
    .btn-inline:hover span {
      margin-left: .8rem;
      /* Want arrow to move right by giving it a margin-left upon hover */ }
  .btn-inline:focus {
    outline: none;
    animation: pulsate 1s infinite;
    /* Trigger the @keyframes pulsate animation when Albufeira, Portugal link/button is clicked on or in focus. Make the animation infinite so it keeps scaling up and down and doesn't just do this once */ }

/* Animation for when you click on Albufeira, Portugal location - there is an animation that makes the location text scale up and down */
@keyframes pulsate {
  0% {
    transform: scale(1);
    box-shadow: none; }
  50% {
    transform: scale(1.05);
    box-shadow: 0 1rem 4rem rgba(0, 0, 0, 0.25); }
  100% {
    transform: scale(1);
    box-shadow: none; } }

/*-------------------------------HOTEL DETAILS SECTION-------------------------------------------------------*/
/*-------------------------------HOTEL PARAGRAPH--------------------------------------------*/
.paragraph:not(:last-of-type) {
  margin-bottom: 2rem; }

/*-------------------------------LIST-------------------------------------------------------*/
.list {
  list-style: none;
  /* Eliminates list bullet points */
  margin: 3rem 0;
  /* 3rem margin top and bottom 0 margin left/right */
  padding: 3rem 0;
  /* 3rem padding top and bottom 0 padding left/right */
  border-top: var(--line);
  border-bottom: var(--line);
  display: flex;
  /* This will place all hotel list items side by side horizontally but it is a mess and that's why we need &__item below with a flex: 0 (grow) 0 (shrink) 50% (width) so each list item only takes up 50% of the width which would give you 2 list items per row.  */
  flex-wrap: wrap;
  /* This will automatically wrap list items to next line */ }
  .list__item {
    flex: 0 0 50%;
    /* This solves the problem of list items looking terrible upon the initial flex being set as this sets each flex item to 50% which would then allow 2 list items per row */
    margin-bottom: .7rem; }
  .list__item::before {
    /* This is to place the arrow svg item before each list item */
    content: "";
    display: inline-block;
    /* MUST PUT THIS HERE OTHERWISE ARROWS WILL NOT SHOW BEFORE LIST ITEMS */
    height: 1rem;
    width: 1rem;
    margin-right: .7rem;
    /* OLDER BROWSERS */
    /* NEWER BROWSERS */
    background-color: var(--color-primary);
    /* Sets the color of our svg arrows; Before placing -webkit-mask-image in code below this is a pinkish square defined by our --color-primary color */
    -webkit-mask-image: url(../img/chevron-thin-right.svg);
    /* Masks allow you to change color of background images. What this does is it clips the background around the image and makes it white (or whatever background you have styled) and makes the image itself transparent which then allows you to see through the image to the background you set for the image above which in this case is --color-primary which allows you to get a colored image of your choosing */
    -webkit-mask-size: cover;
    /* This is needed because the image size is naturally bigger than 1rem. If you set image height and width to 2rem this line of code is not needed. However, because we set the height and width properties to smaller than the image itself we need to have this property set to cover to ensure the transparency of the image and we get our desired look even if we set the height and width properties of image smaller than the actual size of the image itself. Without this line of code you see the pinkish color but its not a full arrow. */
    mask-image: url(../img/chevron-thin-right.svg);
    /* Masks allow you to change color of background images. What this does is it clips the background around the image and makes it white (or whatever background you have styled) and makes the image itself transparent which then allows you to see through the image to the background you set for the image above which in this case is --color-primary which allows you to get a colored image of your choosing */
    mask-size: cover;
    /* This is needed because the image size is naturally bigger than 1rem. If you set image height and width to 2rem this line of code is not needed. However, because we set the height and width properties to smaller than the image itself we need to have this property set to cover to ensure the transparency of the image and we get our desired look even if we set the height and width properties of image smaller than the actual size of the image itself. Without this line of code you see the pinkish color but its not a full arrow. */ }

/*-------------------------------RECOMMEND-----------------------------------------------------*/
.recommend {
  font-size: 1.3rem;
  color: var(--color-grey-dark-3);
  display: flex;
  /* Flex property needed to get paragraph mentioning how many friends recommended the hotel and the users images on to the same line */
  align-items: center; }
  .recommend__count {
    margin-right: auto;
    /* This automatically calculates the margin needed to push the images to the far right of the container to give it some space from the images. */ }
  .recommend__friends {
    display: flex;
    /* This was done later in the build because as the screen got smaller the photos kept shifting down (one would shift down vertically and we always want these to be horizontal) but setting this to flex makes them always stay horizontally */ }
  .recommend__photo {
    box-sizing: content-box;
    /* This is needed because when we add the border our pictures got smaller. This is because our global default setting is for border-box which automatically adjusts the content inside the container for any given padding and borders. No matter how much padding or borders the box won't change its height or width accordingly with border box. But in this case we do want the height and width properties to change based upon adding borders and padding, etc so that our pictures don't get smaller when we add a border. So...we change the box-sizing back to its default which is content-box; */
    height: 4rem;
    width: 4rem;
    border-radius: 50%;
    /* Makes the images of the users round */
    border: 3px solid #fff;
    /* Giving the images a white border that matches the background to give the images a much cooler look */ }
    .recommend__photo:not(:last-child) {
      margin-right: -2rem;
      /* Give images negative right margin EXCEPT the last image to make it so they overlap each other and kind of slightly sit on top of each other */ }

/*-------------------------------USER REVIEWS-----------------------------------------------------*/
.review {
  background-color: #fff;
  box-shadow: var(--shadow-light);
  padding: 3rem;
  margin-bottom: 3.5rem;
  position: relative;
  /* Purpose of positioning this relative is so we can absolute position our quotation marks in our user review */
  overflow: hidden;
  /* The double quotation marks were overflowing outside our user review box on to the light grey background behind it. This hides any element overflowing the container */ }
  @media only screen and (max-width: 56.25em) {
    .review {
      padding: 2rem;
      margin-bottom: 3rem; } }
  .review__text {
    margin-bottom: 2rem;
    z-index: 10;
    /* Setting this to a z-index of 10 which is higher than the z-index of 1 assigned to the &::before (double quotes) because we want the text to sit on top of the double quotes */
    position: relative;
    /* MUST HAVE POSITIONED ELEMENT IN ORDER TO USE Z-INDEX */ }
  .review__user {
    display: flex;
    /* Flex needed here so we can align the image and the <p> tags that contain the user-name and user-date */
    align-items: center;
    /* Vertically align elements */ }
  .review__photo {
    height: 4.5rem;
    width: 4.5rem;
    border-radius: 50%;
    margin-right: 1.5rem; }
  .review__user-box {
    margin-right: auto;
    /* This calcs the max amount of margin that it can give to element without pushing the other element which in this case is the user rating off the row/line. It pushes the user rating all the way to the far right of the container */ }
  .review__user-name {
    font-size: 1.1rem;
    font-weight: 600;
    text-transform: uppercase;
    margin-bottom: .4rem; }
  .review__user-date {
    font-size: 1rem;
    color: var(--color-grey-dark-3); }
  .review__rating {
    font-size: 2.2rem;
    font-weight: 300;
    color: var(--color-primary); }
  .review::before {
    /* This pseudo element's purpose is to get the double quotation marks to display in user review section. We are creating the content before all the other content is displayed from our HTML */
    content: "\201C";
    /* \201C is the code needed to get a left double quotation mark to display in CSS*/
    position: absolute;
    /* Set the parent class .review to position: relative so we can place these quotation marks absolute according to the parent */
    top: -2.75rem;
    left: -1rem;
    line-height: 1;
    /* Needed because quotation marks height was humongous and this shrinks it to its size */
    font-size: 20rem;
    color: var(--color-grey-light-2);
    font-family: sans-serif;
    z-index: 1; }

/*-------------------------------CTA - BOOK NOW BOTTOM TEXT SECTION -----------------------------------------------------*/
.cta {
  padding: 3.5rem 0;
  text-align: center; }
  @media only screen and (max-width: 56.25em) {
    .cta {
      padding: 2.5rem 0; } }
  .cta__book-now {
    font-size: 2rem;
    font-weight: 300;
    text-transform: uppercase;
    margin-bottom: 2.5rem; }

/*-------------------------------CTA - BOOK NOW BUTTON SECTION -----------------------------------------------------*/
.btn {
  font-size: 1.5rem;
  font-weight: 300;
  text-transform: uppercase;
  border-radius: 10rem;
  /* Making the button round */
  border: none;
  /* Get rid of the default border on a <button> tag */
  background-image: linear-gradient(to right, var(--color-primary-light), var(--color-primary-dark));
  /* Gives the button the linear gradient background image which goes from left (which is a lighter color) to right (which is a darker color) */
  color: #fff;
  /* Text color of button */
  position: relative;
  /* Positioned relative so that we can absolute position the &__invisible button below */
  overflow: hidden;
  /* This hides the part of the button that is overflowing to the outside which is the &__invisible class below. What we are hiding is this invisible class that we set above the visible button as we don't want that to be visible at all until user hovers over button then this invisible class will slide down and be visible inside the button. */
  cursor: pointer; }
  .btn > * {
    /* Selector selects all of the children inside the parent class (parent is the .btn class). Added this selector because we had a lot of repeated code between &__visible and &__invisible classes. */
    display: inline-block;
    /* &__btn__visible is a span tag which is an inline element. We need to change this to an inline-block element so that we can use padding property. With inline elements you cannot use the padding property. */
    height: 100%;
    /* Giving it 100% height of its parent. */
    width: 100%;
    /* Giving it 100% width of its parent. */
    transition: all .2s; }
  .btn__visible {
    padding: 2rem 7.5rem; }
  .btn__invisible {
    position: absolute;
    /* Positioned absolute so we can place this directly above the button and hidden. Had to relatively position its parent which is the .btn button above in order to absolutely position this element. */
    padding: 2rem 0rem;
    /* Must have a left to right padding at 0 because the word Left is flowing on to the button because if you give it a ton of left to right padding the word will overflow on to button and you want it to be completely hidden so.....no padding is needed on the left to right so that the words completely fit into the invisible button above the visible button. */
    left: 0;
    top: -100%;
    /* Want to position this just outside its parent container which is the .btn class so it stays invisible in its starting position. */
    transition: all .2s; }
  .btn:hover {
    background-image: linear-gradient(to left, var(--color-primary-light), var(--color-primary-dark));
    /* Gives the button the linear gradient background image which goes from right (which is a lighter color) to left (which is a darker color). It is the exact opposite gradient direction of color when it is not hovered over you will notice when not hovered over darkest section is on right but when hovered over darkest section is on left */ }
  .btn:hover .btn__visible {
    transform: translateY(100%);
    /* Upon being hovered over this slides down 100% */ }
  .btn:hover .btn__invisible {
    /* Selector selects all &__invisible elements that are descendants of the .btn class when hovered over. */
    position: absolute;
    /* Positioned this absolute here but this is not needed because we already positioned the &__invisible element absolute in the code above. */
    top: 0;
    /* Since its starting position is -100% when hovered over we want this to go to its normal position so it is visible inside the button and that would be at position 0. */ }
  .btn:focus {
    /* When button is in focus which is either tabbed over or selected */
    outline: none;
    /* Getting rid of default outline when something is in focus */
    animation: pulsate 1s infinite;
    /* When button is in focus or selected we want our pulsate animation to start. This won't animate on just a hover it has to be in focus or selected */ }
